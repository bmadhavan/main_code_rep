Merge k Sorted Lists
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.


My Solution:
Use a priority queue to put the first element from all the sorted list.
Then pop() the first element, which is the smallest. Then add the next element from that list to the queue.
Repeat this till all the lists are walked.
Complexity: O(n) [ Walk thru all the lists once only ]

Other options thought about: 
Yse a map to store rather than a priority_queue. Will not work due to duplicate elements. 

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    
    struct compare{ 
        bool operator()( ListNode* l , ListNode* r){
            return  (l->val > r->val );
        }
    };
    
    
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        priority_queue<ListNode* , vector<ListNode*> , compare > q;
        ListNode* result=nullptr; 
               
        for ( int i = 0; i < lists.size() ; i++ )
        {
            if ( lists[i] )
                q.push( lists[i] );
        }
                        
        if ( q.empty() ) 
           return result; 
        
        ListNode*curr = result = q.top();
        q.pop();
        if ( curr->next )
            q.push( curr->next);
            
        while ( !q.empty() )
        {
            curr->next = q.top();
            q.pop(); 
            curr = curr->next;
            if ( curr->next )
                q.push( curr->next );
        }        
        return result;
     }
};
Maximum Subarray
Find the contiguous subarray within an array (containing at least one number) which has the largest sum.
For example, given the array [-2,1,-3,4,-1,2,1,-5,4],
the contiguous subarray [4,-1,2,1] has the largest sum = 6.

My Solution: 
Loop through the list. if the sum till the current number is < 0 then reset sum. Else store. 


 int maxSubArray(vector<int>& nums) {
   
        int max1=0;
        int prev;
   
        if ( nums.size() == 0)
            return 0;
        
        if ( nums.size() == 1)
            return nums.at(0);    
        
        max1=nums.at(0);
        if ( max1 > 0 )
            prev = max1;
        else 
            prev =0;
            
        for ( int i=1 ; i < nums.size() ; i++ )
        {
            int sum = nums.at(i) + prev ;
            prev = sum > 0 ? sum : 0;
            max1 = max(sum, max1);    
        }
        return max1;
    }
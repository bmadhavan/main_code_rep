Given an array of integers and an integer k, find out whether there are two distinct indices i and j in the array such that nums[i] = nums[j] and 
the difference between i and j is at most k.

My approach: 
O(n)
Use an unordered_map to store the value and its list of indexes.
Loop through the input list and insert if element not found. 
If element already found, look through the stored indexes if they are atmost 'k'

     bool containsNearbyDuplicate(vector<int>& nums, int k) {
        
        if ( nums.size() == 0 ) 
        return 0; 

        unordered_map<int, vector<int>>  mymap;
        
        for ( int i=0 ; i < nums.size() ; i++ )
        {
            if ( mymap.find(nums.at(i)) == mymap.end() )
            {
                mymap[nums.at(i)].push_back(i);
            } else {
                for ( int j=0 ; j < mymap[nums.at(i)].size() ; j ++ )
                {
                    if ( i - mymap[nums.at(i)][j] <= k )
                        return 1;
                }
               mymap[nums.at(i)].push_back(i); 
            }
        }
        return 0;
    }